<?php

namespace AppBundle\Repository;

/**
 * LocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LocationRepository extends \Doctrine\ORM\EntityRepository
{

    public function findAllComputed()
    {
        $sql = "
        SELECT 
          l.id,
          l.city,
          l.state,
          d.max_temp_c,
          d.min_temp_c,
          d.avg_temp_c,
          d.max_temp_f,
          d.min_temp_f,
          d.avg_temp_f 
        FROM 
          location as l
        LEFT JOIN (
          SELECT 
          location_id, 
          ROUND(MAX(temperature)) as max_temp_c, 
          ROUND(MIN(temperature)) as min_temp_c, 
          ROUND(AVG(temperature)) as avg_temp_c,
          ROUND(MAX(temperature) * 1.8 + 32) as max_temp_f, 
          ROUND(MIN(temperature) * 1.8 + 32) as min_temp_f, 
          ROUND(AVG(temperature) * 1.8 + 32) as avg_temp_f
          FROM 
            location_data 
          WHERE
            DATE(date) > (NOW() - INTERVAL 7 DAY)
          GROUP BY 
            location_id
        ) as d 
        ON 
          (l.id = d.location_id)
        ";

        $statement = $this->getEntityManager()->getConnection()->prepare($sql);
        $statement->execute();

        return $statement->fetchAll();
    }

    public function findOneComputed($id) {

        $sql = "
        SELECT 
          l.id,
          l.city,
          l.state,
          d.avg_temp_c,
          d.avg_temp_f 
        FROM 
          location as l
        LEFT JOIN (
          SELECT 
          location_id, 
          ROUND(AVG(temperature)) as avg_temp_c,
          ROUND(AVG(temperature) * 1.8 + 32) as avg_temp_f
          FROM 
            location_data 
          WHERE
           location_id = :id
        ) as d 
        ON 
          (l.id = d.location_id)
        WHERE 
          l.id = :id
        ";

        $statement = $this->getEntityManager()->getConnection()->prepare($sql);
        $statement->bindValue('id', $id);
        $statement->execute();

        return $statement->fetch();
    }
}
